using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using UELPM.Model.Models;

namespace UELPM.Business.Interface
{
    public interface ISharedManager
    {
        IEnumerable<GetItemMasters> GetItemMasters(int? locationId, int companyId, string searchKey);
        IEnumerable<WorkFlowStatuses> GetWorkFlowStatus(int? WorkFlowPrcoessId);
        IEnumerable<GetItemMasters> GetItemMastersbasedLocationID(int? locationId, string searchKey);
        IEnumerable<Locations> GetLocations(string searchKey, int? locationId);
        IEnumerable<Suppliers> GetAllSuppliers(string searchKey, int supplierTypeId, int companyId);
        IEnumerable<Suppliers> getActiveSuppliers(string searchKey, int supplierTypeId, int companyId);
        IEnumerable<Suppliers> GetOtherEntitySuppliers(string searchKey, int companyId);
        IEnumerable<Currency> GetCurrencies();
        IEnumerable<GetItemMasters> GetItemsfortransfer(int? locationId, string searchKey);
        IEnumerable<Facilities> GetFacilities(string searchKey, int companyId);
        IEnumerable<PaymentTerm> GetPaymentTerms(int CompanyId);
        IEnumerable<UOM> GetUOMList();
        IEnumerable<Companies> GetCompanies(string searchKey);
        IEnumerable<Taxes> GetTaxes(int taxClass);
        IEnumerable<Engineer> GetEngineers(string searchKey);
        IEnumerable<Locations> GetAllDepartments();
        IEnumerable<Locations> GetAllUniqueDepartments();
        IEnumerable<DeliveryTerms> GetAllDeliveryTerms(int CompanyId);
        IEnumerable<GetAssets> GetAssets(string searchKey);
        IEnumerable<PurchaseOrderRequests> GetAllPORequest(string searchKey, int CompanyId);
        IEnumerable<PaymentType> GetAllPaymentType();
        byte[] GetUserProfileImage(int userId);
        IEnumerable<Invoices> GetAllINVRequest(GridDisplayInput gridDisplayInput);
        IEnumerable<PurchaseOrderRequests> GetAllPORequestForQuotation(string searchKey, int CompanyId);
        IEnumerable<Customer> GetAllSearchCustomers(string searchKey, int customerCategoryId, int companyId);
        IEnumerable<SupplierCategorys> GetSupplierCategory();
        IEnumerable<Suppliers> GetSuppliersByKey(string searchKey, int CategoryId, int companyId);
        IEnumerable<Priority> GetPriorityList();
        IEnumerable<UserProfile> GetUsersByCompany(string userName, int companyId);
        IEnumerable<EngineerList> GetEngineerList(int ticketId);
        IEnumerable<ExpenseTypes> GetExpenseTypes();
        int WorkFlowClarificationReply(WorkFlowApproval requestApproval);
        int WorkFlowRequestStatusUpdate(WorkFlowApproval workFlowApprovals);
        void SendForApproval(WorkFlowParameter workFlowApproval, bool isFromUi);
        IEnumerable<UserRoles> GetUserRoles();
        IEnumerable<SupplierService> GetJobCategory(string searchKey);
        IEnumerable<Locations> GetDepartmentsByCompany(int companyId);
        IEnumerable<Locations> getDepartmentsWorkFlow(int companyId, int processId);
        IEnumerable<Locations> getUserDepartments(int companyId, int processId, int userId);
        IEnumerable<Locations> GetUserCompanyDepartments(int companyId, int userId);
        IEnumerable<Locations> GetAllSearchDepartments(string searchKey, int companyId);
        IEnumerable<ItemCategory> GetItemCategorys(string searchKey);
        IEnumerable<ItemType> GetItemTypes(string searchKey);
        IEnumerable<ItemMasters> GetItemMasterName(string searchKey);
        IEnumerable<AccountCode> GetAllSearchServices(string searchKey, int companyId, int categoryId);
        IEnumerable<AccountCode> GetAccountCodesByCategory(int categoryId, int companyId, string serachkey);
        IEnumerable<AccountCode> GetAccountCodesBySubCategory(int categoryId, int accountTypeId, int companyId);
        IEnumerable<GRNS> GetGRNS(string searchKey, int? companyId, int? statusId);
        IEnumerable<TaxGroup> GetTaxGroups();
        IEnumerable<Organization> getOrganizations();
        IEnumerable<UserProfile> GetAllUsers();
        DashboardCount GetDashboardCount(int CompanyId);
        IEnumerable<Taxes> GetTaxClassesByTaxGroup(int taxGroupId);
        IEnumerable<BillingFrequency> GetBillingFrequencies();
        IEnumerable<CostCentre> GetCostCentres();
        IEnumerable<ServiceType> GetAllServiceTypes();
        IEnumerable<SupplierSubCode> GetSupplierSubCodes(SupplierSubCode subCode);
        CompanyDetails GetCompanyDetails(int companyId);
        List<SupplierContactPerson> GetSupplierContact(int supplierId, int companyId, int purchaseOrderId, int poTYpeId);
        IEnumerable<COAAccountType> GetAccountType();
        string SupplierVerificationApproval(WorkFlowParameter workFlowApproval);
        IEnumerable<JVACode> getJVACode();
        void setJVACode(int JVANumber);
        bool CheckIsSupplierVerifier(int userId, int companyId);
        IEnumerable<UserRoles> GetuserManagementRole(string searchKey);
        IEnumerable<BillingType> GetBillingTypes();
        IEnumerable<Companies> GetCompaniesByUserId(int userId);
        IEnumerable<AccountCode> GetAccountCodesByAccountType(int companyId);
        IEnumerable<PageAccessLevel> GetRoleAccessLevel(string roleIds);
        IEnumerable<AssetSubCategory> GetAssetSubCategories(int companyId, string searchKey);
        IEnumerable<UserProfile> GetSupplierVerifiers();
        IEnumerable<UserProfile> GetUsersByCompany(string searchKey, int roleId, int companyId);
        IEnumerable<ItemGLCode> GetGlcodes(int? InvoiceTypeId, int companyId, string searchKey, int PoTypeId, int TypeId, string AccountCodeName, int AccountType, int AccountCodeCategoryId);
        IEnumerable<Roles> GetUserRolesByCompany(int userId, int companyId);
        IEnumerable<AccountCode> GetExpenseBykey(string categoryId, int companyId);
        IEnumerable<Country> GetAllCountries(string searchKey);
        void UpdateReadNotifications(int processId, int documentId, int companyId);
        DocumentAddress GetDocumentAddress(int processId, int documentId, int companyId);
        IEnumerable<TransactionType> GetTransactionTypes();
        IEnumerable<Nationality> GetNationalities();
        IEnumerable<AddressType> GetAddressTypes();
    }
}
